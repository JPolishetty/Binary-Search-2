class Solution {

    //In sorted rotated matrix, atleast one side is sorted and only smallest element have highest numbers on both sides and will be in unsorted side
    public int findMin(int[] nums) {
        // if the matrix only have one element, it is mininum
        if(nums.length == 1){
            return nums[0];
        }
        int low = 0;
        int high = nums.length - 1;
        while(low <= high){
            //if the matrix is sorted, then returning 1st element, lowest
            if(nums[low] <= nums[high]){
            return nums[low];
            }
            int mid = low + (high-low)/2;
            //checking if mid element has 2 highest numbers on both sides and also checking boundaries 
            if((mid == 0 || nums[mid-1] > nums[mid]) && (mid == nums.length-1 || nums[mid] < nums[mid+1])){
                return nums[mid];
            }
            else if(nums[low] <= nums[mid]){
                low = mid + 1;     //checking if left side is sorted, then move right
            }
            else{
                high = mid - 1;    //checking if right side is sorted, then move left
            }
        }
        return -1;
    }
}
